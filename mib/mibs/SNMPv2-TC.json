{
  "imports": {
    "class": "imports",
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "OBJECT-IDENTITY",
      "Counter64",
      "Unsigned32",
      "Counter32",
      "Gauge32",
      "MODULE-IDENTITY",
      "TimeTicks",
      "Bits",
      "iso",
      "MibIdentifier",
      "Integer32",
      "NOTIFICATION-TYPE",
      "OBJECT-TYPE",
      "IpAddress"
    ],
    "SNMPv2-TC": [
      "TEXTUAL-CONVENTION",
      "DisplayString"
    ]
  },
  "DisplayString": {
    "name": "DisplayString",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "displayhint": "255a",
    "status": "current",
    "description": "Represents textual information taken from the NVT ASCII\n\n         character set, as defined in pages 4, 10-11 of RFC 854.\n\n\n\n         To summarize RFC 854, the NVT ASCII repertoire specifies:\n\n\n\n           - the use of character codes 0-127 (decimal)\n\n\n\n           - the graphics characters (32-126) are interpreted as\n\n             US ASCII\n\n\n\n           - NUL, LF, CR, BEL, BS, HT, VT and FF have the special\n\n             meanings specified in RFC 854\n\n\n\n           - the other 25 codes have no standard interpretation\n\n\n\n           - the sequence 'CR LF' means newline\n\n\n\n           - the sequence 'CR NUL' means carriage-return\n\n\n\n           - an 'LF' not preceded by a 'CR' means moving to the\n\n             same column on the next line.\n\n\n\n           - the sequence 'CR x' for any x other than LF or NUL is\n\n             illegal.  (Note that this also means that a string may\n\n             end with either 'CR LF' or 'CR NUL', but not with CR.)\n\n\n\n         Any object defined using this syntax may not exceed 255\n\n         characters in length."
  },
  "PhysAddress": {
    "name": "PhysAddress",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "displayhint": "1x:",
    "status": "current",
    "description": "Represents media- or physical-level addresses."
  },
  "MacAddress": {
    "name": "MacAddress",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "displayhint": "1x:",
    "status": "current",
    "description": "Represents an 802 MAC address represented in the\n\n         `canonical' order defined by IEEE 802.1a, i.e., as if it\n\n         were transmitted least significant bit first, even though\n\n         802.5 (in contrast to other 802.x protocols) requires MAC\n\n         addresses to be transmitted most significant bit first."
  },
  "TruthValue": {
    "name": "TruthValue",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "true": 1,
          "false": 2
        }
      }
    },
    "status": "current",
    "description": "Represents a boolean value."
  },
  "TestAndIncr": {
    "name": "TestAndIncr",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type"
    },
    "status": "current",
    "description": "Represents integer-valued information used for atomic\n\n         operations.  When the management protocol is used to specify\n\n         that an object instance having this syntax is to be\n\n         modified, the new value supplied via the management protocol\n\n         must precisely match the value presently held by the\n\n         instance.  If not, the management protocol set operation\n\n         fails with an error of `inconsistentValue'.  Otherwise, if\n\n         the current value is the maximum value of 2^31-1 (2147483647\n\n         decimal), then the value held by the instance is wrapped to\n\n         zero; otherwise, the value held by the instance is\n\n         incremented by one.  (Note that regardless of whether the\n\n         management protocol set operation succeeds, the variable-\n\n         binding in the request and response PDUs are identical.)\n\n\n\n         The value of the ACCESS clause for objects having this\n\n         syntax is either `read-write' or `read-create'.  When an\n\n         instance of a columnar object having this syntax is created,\n\n         any value may be supplied via the management protocol.\n\n\n\n         When the network management portion of the system is re-\n\n         initialized, the value of every object instance having this\n\n         syntax must either be incremented from its value prior to\n\n         the re-initialization, or (if the value prior to the re-\n\n         initialization is unknown) be set to a pseudo-randomly\n\n         generated value."
  },
  "AutonomousType": {
    "name": "AutonomousType",
    "class": "textualconvention",
    "type": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "status": "current",
    "description": "Represents an independently extensible type identification\n\n         value.  It may, for example, indicate a particular sub-tree\n\n         with further MIB definitions, or define a particular type of\n\n         protocol or hardware."
  },
  "InstancePointer": {
    "name": "InstancePointer",
    "class": "textualconvention",
    "type": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "status": "obsolete",
    "description": "A pointer to either a specific instance of a MIB object or\n\n         a conceptual row of a MIB table in the managed device.  In\n\n         the latter case, by convention, it is the name of the\n\n         particular instance of the first accessible columnar object\n\n         in the conceptual row.\n\n\n\n         The two uses of this textual convention are replaced by\n\n         VariablePointer and RowPointer, respectively."
  },
  "VariablePointer": {
    "name": "VariablePointer",
    "class": "textualconvention",
    "type": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "status": "current",
    "description": "A pointer to a specific object instance.  For example,\n\n         sysContact.0 or ifInOctets.3."
  },
  "RowPointer": {
    "name": "RowPointer",
    "class": "textualconvention",
    "type": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "status": "current",
    "description": "Represents a pointer to a conceptual row.  The value is the\n\n         name of the instance of the first accessible columnar object\n\n         in the conceptual row.\n\n\n\n         For example, ifIndex.3 would point to the 3rd row in the\n\n         ifTable (note that if ifIndex were not-accessible, then\n\n         ifDescr.3 would be used instead)."
  },
  "RowStatus": {
    "name": "RowStatus",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "active": 1,
          "notInService": 2,
          "notReady": 3,
          "createAndGo": 4,
          "createAndWait": 5,
          "destroy": 6
        }
      }
    },
    "status": "current",
    "description": "The RowStatus textual convention is used to manage the\n\n                 creation and deletion of conceptual rows, and is used as the\n\n                 value of the SYNTAX clause for the status column of a\n\n                 conceptual row (as described in Section 7.7.1 of [2].)\n\n\n\n                 The status column has six defined values:\n\n\n\n                      - `active', which indicates that the conceptual row is\n\n                      available for use by the managed device;\n\n\n\n                      - `notInService', which indicates that the conceptual\n\n                      row exists in the agent, but is unavailable for use by\n\n                      the managed device (see NOTE below);\n\n\n\n                      - `notReady', which indicates that the conceptual row\n\n                      exists in the agent, but is missing information\n\n                      necessary in order to be available for use by the\n\n                      managed device;\n\n\n\n                      - `createAndGo', which is supplied by a management\n\n                      station wishing to create a new instance of a\n\n                      conceptual row and to have its status automatically set\n\n                      to active, making it available for use by the managed\n\n                      device;\n\n\n\n                      - `createAndWait', which is supplied by a management\n\n                      station wishing to create a new instance of a\n\n                      conceptual row (but not make it available for use by\n\n                      the managed device); and,\n\n\n\n                      - `destroy', which is supplied by a management station\n\n                      wishing to delete all of the instances associated with\n\n                      an existing conceptual row.\n\n\n\n                 Whereas five of the six values (all except `notReady') may\n\n                 be specified in a management protocol set operation, only\n\n                 three values will be returned in response to a management\n\n                 protocol retrieval operation:  `notReady', `notInService' or\n\n                 `active'.  That is, when queried, an existing conceptual row\n\n                 has only three states:  it is either available for use by\n\n                 the managed device (the status column has value `active');\n\n                 it is not available for use by the managed device, though\n\n                 the agent has sufficient information to make it so (the\n\n                 status column has value `notInService'); or, it is not\n\n                 available for use by the managed device, and an attempt to\n\n                 make it so would fail because the agent has insufficient\n\n                 information (the state column has value `notReady').\n\n                                          NOTE WELL\n\n\n\n                      This textual convention may be used for a MIB table,\n\n                      irrespective of whether the values of that table's\n\n                      conceptual rows are able to be modified while it is\n\n                      active, or whether its conceptual rows must be taken\n\n                      out of service in order to be modified.  That is, it is\n\n                      the responsibility of the DESCRIPTION clause of the\n\n                      status column to specify whether the status column must\n\n                      not be `active' in order for the value of some other\n\n                      column of the same conceptual row to be modified.  If\n\n                      such a specification is made, affected columns may be\n\n                      changed by an SNMP set PDU if the RowStatus would not\n\n                      be equal to `active' either immediately before or after\n\n                      processing the PDU.  In other words, if the PDU also\n\n                      contained a varbind that would change the RowStatus\n\n                      value, the column in question may be changed if the\n\n                      RowStatus was not equal to `active' as the PDU was\n\n                      received, or if the varbind sets the status to a value\n\n                      other than 'active'.\n\n\n\n                 Also note that whenever any elements of a row exist, the\n\n                 RowStatus column must also exist.\n\n                 To summarize the effect of having a conceptual row with a\n\n                 status column having a SYNTAX clause value of RowStatus,\n\n                 consider the following state diagram:\n\n\n\n                                              STATE\n\n                       +--------------+-----------+-------------+-------------\n\n                       |      A       |     B     |      C      |      D\n\n                       |              |status col.|status column|\n\n                       |status column |    is     |      is     |status column\n\n         ACTION        |does not exist|  notReady | notInService|  is active\n\n         --------------+--------------+-----------+-------------+-------------\n\n         set status    |noError    ->D|inconsist- |inconsistent-|inconsistent-\n\n         column to     |       or     |   entValue|        Value|        Value\n\n         createAndGo   |inconsistent- |           |             |\n\n                       |         Value|           |             |\n\n         --------------+--------------+-----------+-------------+-------------\n\n         set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-\n\n         column to     |       or     |   entValue|        Value|        Value\n\n         createAndWait |wrongValue    |           |             |\n\n         --------------+--------------+-----------+-------------+-------------\n\n         set status    |inconsistent- |inconsist- |noError      |noError\n\n         column to     |         Value|   entValue|             |\n\n         active        |              |           |             |\n\n                       |              |     or    |             |\n\n                       |              |           |             |\n\n                       |              |see 2   ->D|          ->D|          ->D\n\n         --------------+--------------+-----------+-------------+-------------\n\n         set status    |inconsistent- |inconsist- |noError      |noError   ->C\n\n         column to     |         Value|   entValue|             |\n\n         notInService  |              |           |             |\n\n                       |              |     or    |             |      or\n\n                       |              |           |             |\n\n                       |              |see 3   ->C|          ->C|wrongValue\n\n         --------------+--------------+-----------+-------------+-------------\n\n         set status    |noError       |noError    |noError      |noError\n\n         column to     |              |           |             |\n\n         destroy       |           ->A|        ->A|          ->A|          ->A\n\n         --------------+--------------+-----------+-------------+-------------\n\n         set any other |see 4         |noError    |noError      |see 5\n\n         column to some|              |           |             |\n\n         value         |              |      see 1|          ->C|          ->D\n\n         --------------+--------------+-----------+-------------+-------------\n\n\n\n                 (1) goto B or C, depending on information available to the\n\n                 agent.\n\n                 (2) if other variable bindings included in the same PDU,\n\n                 provide values for all columns which are missing but\n\n                 required, then return noError and goto D.\n\n\n\n                 (3) if other variable bindings included in the same PDU,\n\n                 provide values for all columns which are missing but\n\n                 required, then return noError and goto C.\n\n\n\n                 (4) at the discretion of the agent, the return value may be\n\n                 either:\n\n\n\n                      inconsistentName:  because the agent does not choose to\n\n                      create such an instance when the corresponding\n\n                      RowStatus instance does not exist, or\n\n\n\n                      inconsistentValue:  if the supplied value is\n\n                      inconsistent with the state of some other MIB object's\n\n                      value, or\n\n\n\n                      noError: because the agent chooses to create the\n\n                      instance.\n\n\n\n                 If noError is returned, then the instance of the status\n\n                 column must also be created, and the new state is B or C,\n\n                 depending on the information available to the agent.  If\n\n                 inconsistentName or inconsistentValue is returned, the row\n\n                 remains in state A.\n\n\n\n                 (5) depending on the MIB definition for the column/table,\n\n                 either noError or inconsistentValue may be returned.\n\n\n\n                 NOTE: Other processing of the set request may result in a\n\n                 response other than noError being returned, e.g.,\n\n                 wrongValue, noCreation, etc.\n\n\n\n                                   Conceptual Row Creation\n\n\n\n                 There are four potential interactions when creating a\n\n                 conceptual row:  selecting an instance-identifier which is\n\n                 not in use; creating the conceptual row; initializing any\n\n                 objects for which the agent does not supply a default; and,\n\n                 making the conceptual row available for use by the managed\n\n                 device.\n\n                 Interaction 1: Selecting an Instance-Identifier\n\n\n\n                 The algorithm used to select an instance-identifier varies\n\n                 for each conceptual row.  In some cases, the instance-\n\n                 identifier is semantically significant, e.g., the\n\n                 destination address of a route, and a management station\n\n                 selects the instance-identifier according to the semantics.\n\n\n\n                 In other cases, the instance-identifier is used solely to\n\n                 distinguish conceptual rows, and a management station\n\n                 without specific knowledge of the conceptual row might\n\n                 examine the instances present in order to determine an\n\n                 unused instance-identifier.  (This approach may be used, but\n\n                 it is often highly sub-optimal; however, it is also a\n\n                 questionable practice for a naive management station to\n\n                 attempt conceptual row creation.)\n\n\n\n                 Alternately, the MIB module which defines the conceptual row\n\n                 might provide one or more objects which provide assistance\n\n                 in determining an unused instance-identifier.  For example,\n\n                 if the conceptual row is indexed by an integer-value, then\n\n                 an object having an integer-valued SYNTAX clause might be\n\n                 defined for such a purpose, allowing a management station to\n\n                 issue a management protocol retrieval operation.  In order\n\n                 to avoid unnecessary collisions between competing management\n\n                 stations, `adjacent' retrievals of this object should be\n\n                 different.\n\n\n\n                 Finally, the management station could select a pseudo-random\n\n                 number to use as the index.  In the event that this index\n\n                 was already in use and an inconsistentValue was returned in\n\n                 response to the management protocol set operation, the\n\n                 management station should simply select a new pseudo-random\n\n                 number and retry the operation.\n\n\n\n                 A MIB designer should choose between the two latter\n\n                 algorithms based on the size of the table (and therefore the\n\n                 efficiency of each algorithm).  For tables in which a large\n\n                 number of entries are expected, it is recommended that a MIB\n\n                 object be defined that returns an acceptable index for\n\n                 creation.  For tables with small numbers of entries, it is\n\n                 recommended that the latter pseudo-random index mechanism be\n\n                 used.\n\n                 Interaction 2: Creating the Conceptual Row\n\n\n\n                 Once an unused instance-identifier has been selected, the\n\n                 management station determines if it wishes to create and\n\n                 activate the conceptual row in one transaction or in a\n\n                 negotiated set of interactions.\n\n\n\n                 Interaction 2a: Creating and Activating the Conceptual Row\n\n\n\n                 The management station must first determine the column\n\n                 requirements, i.e., it must determine those columns for\n\n                 which it must or must not provide values.  Depending on the\n\n                 complexity of the table and the management station's\n\n                 knowledge of the agent's capabilities, this determination\n\n                 can be made locally by the management station.  Alternately,\n\n                 the management station issues a management protocol get\n\n                 operation to examine all columns in the conceptual row that\n\n                 it wishes to create.  In response, for each column, there\n\n                 are three possible outcomes:\n\n\n\n                      - a value is returned, indicating that some other\n\n                      management station has already created this conceptual\n\n                      row.  We return to interaction 1.\n\n\n\n                      - the exception `noSuchInstance' is returned,\n\n                      indicating that the agent implements the object-type\n\n                      associated with this column, and that this column in at\n\n                      least one conceptual row would be accessible in the MIB\n\n                      view used by the retrieval were it to exist. For those\n\n                      columns to which the agent provides read-create access,\n\n                      the `noSuchInstance' exception tells the management\n\n                      station that it should supply a value for this column\n\n                      when the conceptual row is to be created.\n\n\n\n                      - the exception `noSuchObject' is returned, indicating\n\n                      that the agent does not implement the object-type\n\n                      associated with this column or that there is no\n\n                      conceptual row for which this column would be\n\n                      accessible in the MIB view used by the retrieval.  As\n\n                      such, the management station can not issue any\n\n                      management protocol set operations to create an\n\n                      instance of this column.\n\n\n\n                 Once the column requirements have been determined, a\n\n                 management protocol set operation is accordingly issued.\n\n                 This operation also sets the new instance of the status\n\n                 column to `createAndGo'.\n\n                 When the agent processes the set operation, it verifies that\n\n                 it has sufficient information to make the conceptual row\n\n                 available for use by the managed device.  The information\n\n                 available to the agent is provided by two sources:  the\n\n                 management protocol set operation which creates the\n\n                 conceptual row, and, implementation-specific defaults\n\n                 supplied by the agent (note that an agent must provide\n\n                 implementation-specific defaults for at least those objects\n\n                 which it implements as read-only).  If there is sufficient\n\n                 information available, then the conceptual row is created, a\n\n                 `noError' response is returned, the status column is set to\n\n                 `active', and no further interactions are necessary (i.e.,\n\n                 interactions 3 and 4 are skipped).  If there is insufficient\n\n                 information, then the conceptual row is not created, and the\n\n                 set operation fails with an error of `inconsistentValue'.\n\n                 On this error, the management station can issue a management\n\n                 protocol retrieval operation to determine if this was\n\n                 because it failed to specify a value for a required column,\n\n                 or, because the selected instance of the status column\n\n                 already existed.  In the latter case, we return to\n\n                 interaction 1.  In the former case, the management station\n\n                 can re-issue the set operation with the additional\n\n                 information, or begin interaction 2 again using\n\n                 `createAndWait' in order to negotiate creation of the\n\n                 conceptual row.\n\n\n\n                                          NOTE WELL\n\n\n\n                      Regardless of the method used to determine the column\n\n                      requirements, it is possible that the management\n\n                      station might deem a column necessary when, in fact,\n\n                      the agent will not allow that particular columnar\n\n                      instance to be created or written.  In this case, the\n\n                      management protocol set operation will fail with an\n\n                      error such as `noCreation' or `notWritable'.  In this\n\n                      case, the management station decides whether it needs\n\n                      to be able to set a value for that particular columnar\n\n                      instance.  If not, the management station re-issues the\n\n                      management protocol set operation, but without setting\n\n                      a value for that particular columnar instance;\n\n                      otherwise, the management station aborts the row\n\n                      creation algorithm.\n\n\n\n                 Interaction 2b: Negotiating the Creation of the Conceptual\n\n                 Row\n\n\n\n                 The management station issues a management protocol set\n\n                 operation which sets the desired instance of the status\n\n                 column to `createAndWait'.  If the agent is unwilling to\n\n                 process a request of this sort, the set operation fails with\n\n                 an error of `wrongValue'.  (As a consequence, such an agent\n\n                 must be prepared to accept a single management protocol set\n\n                 operation, i.e., interaction 2a above, containing all of the\n\n                 columns indicated by its column requirements.)  Otherwise,\n\n                 the conceptual row is created, a `noError' response is\n\n                 returned, and the status column is immediately set to either\n\n                 `notInService' or `notReady', depending on whether it has\n\n                 sufficient information to make the conceptual row available\n\n                 for use by the managed device.  If there is sufficient\n\n                 information available, then the status column is set to\n\n                 `notInService'; otherwise, if there is insufficient\n\n                 information, then the status column is set to `notReady'.\n\n                 Regardless, we proceed to interaction 3.\n\n\n\n                 Interaction 3: Initializing non-defaulted Objects\n\n\n\n                 The management station must now determine the column\n\n                 requirements.  It issues a management protocol get operation\n\n                 to examine all columns in the created conceptual row.  In\n\n                 the response, for each column, there are three possible\n\n                 outcomes:\n\n\n\n                      - a value is returned, indicating that the agent\n\n                      implements the object-type associated with this column\n\n                      and had sufficient information to provide a value.  For\n\n                      those columns to which the agent provides read-create\n\n                      access (and for which the agent allows their values to\n\n                      be changed after their creation), a value return tells\n\n                      the management station that it may issue additional\n\n                      management protocol set operations, if it desires, in\n\n                      order to change the value associated with this column.\n\n\n\n                      - the exception `noSuchInstance' is returned,\n\n                      indicating that the agent implements the object-type\n\n                      associated with this column, and that this column in at\n\n                      least one conceptual row would be accessible in the MIB\n\n                      view used by the retrieval were it to exist. However,\n\n                      the agent does not have sufficient information to\n\n                      provide a value, and until a value is provided, the\n\n                      conceptual row may not be made available for use by the\n\n                      managed device.  For those columns to which the agent\n\n                      provides read-create access, the `noSuchInstance'\n\n                      exception tells the management station that it must\n\n                      issue additional management protocol set operations, in\n\n                      order to provide a value associated with this column.\n\n                      - the exception `noSuchObject' is returned, indicating\n\n                      that the agent does not implement the object-type\n\n                      associated with this column or that there is no\n\n                      conceptual row for which this column would be\n\n                      accessible in the MIB view used by the retrieval.  As\n\n                      such, the management station can not issue any\n\n                      management protocol set operations to create an\n\n                      instance of this column.\n\n\n\n                 If the value associated with the status column is\n\n                 `notReady', then the management station must first deal with\n\n                 all `noSuchInstance' columns, if any.  Having done so, the\n\n                 value of the status column becomes `notInService', and we\n\n                 proceed to interaction 4.\n\n\n\n                 Interaction 4: Making the Conceptual Row Available\n\n\n\n                 Once the management station is satisfied with the values\n\n                 associated with the columns of the conceptual row, it issues\n\n                 a management protocol set operation to set the status column\n\n                 to `active'.  If the agent has sufficient information to\n\n                 make the conceptual row available for use by the managed\n\n                 device, the management protocol set operation succeeds (a\n\n                 `noError' response is returned).  Otherwise, the management\n\n                 protocol set operation fails with an error of\n\n                 `inconsistentValue'.\n\n\n\n                                          NOTE WELL\n\n\n\n                      A conceptual row having a status column with value\n\n                      `notInService' or `notReady' is unavailable to the\n\n                      managed device.  As such, it is possible for the\n\n                      managed device to create its own instances during the\n\n                      time between the management protocol set operation\n\n                      which sets the status column to `createAndWait' and the\n\n                      management protocol set operation which sets the status\n\n                      column to `active'.  In this case, when the management\n\n                      protocol set operation is issued to set the status\n\n                      column to `active', the values held in the agent\n\n                      supersede those used by the managed device.\n\n\n\n                 If the management station is prevented from setting the\n\n                 status column to `active' (e.g., due to management station\n\n                 or network failure) the conceptual row will be left in the\n\n                 `notInService' or `notReady' state, consuming resources\n\n                 indefinitely.  The agent must detect conceptual rows that\n\n                 have been in either state for an abnormally long period of\n\n                 time and remove them.  It is the responsibility of the\n\n                 DESCRIPTION clause of the status column to indicate what an\n\n                 abnormally long period of time would be.  This period of\n\n                 time should be long enough to allow for human response time\n\n                 (including `think time') between the creation of the\n\n                 conceptual row and the setting of the status to `active'.\n\n                 In the absense of such information in the DESCRIPTION\n\n                 clause, it is suggested that this period be approximately 5\n\n                 minutes in length.  This removal action applies not only to\n\n                 newly-created rows, but also to previously active rows which\n\n                 are set to, and left in, the notInService state for a\n\n                 prolonged period exceeding that which is considered normal\n\n                 for such a conceptual row.\n\n\n\n                                  Conceptual Row Suspension\n\n\n\n                 When a conceptual row is `active', the management station\n\n                 may issue a management protocol set operation which sets the\n\n                 instance of the status column to `notInService'.  If the\n\n                 agent is unwilling to do so, the set operation fails with an\n\n                 error of `wrongValue'.  Otherwise, the conceptual row is\n\n                 taken out of service, and a `noError' response is returned.\n\n                 It is the responsibility of the DESCRIPTION clause of the\n\n                 status column to indicate under what circumstances the\n\n                 status column should be taken out of service (e.g., in order\n\n                 for the value of some other column of the same conceptual\n\n                 row to be modified).\n\n\n\n                                   Conceptual Row Deletion\n\n\n\n                 For deletion of conceptual rows, a management protocol set\n\n                 operation is issued which sets the instance of the status\n\n                 column to `destroy'.  This request may be made regardless of\n\n                 the current value of the status column (e.g., it is possible\n\n                 to delete conceptual rows which are either `notReady',\n\n                 `notInService' or `active'.)  If the operation succeeds,\n\n                 then all instances associated with the conceptual row are\n\n                 immediately removed."
  },
  "TimeStamp": {
    "name": "TimeStamp",
    "class": "textualconvention",
    "type": {
      "type": "TimeTicks",
      "class": "type"
    },
    "status": "current",
    "description": "The value of the sysUpTime object at which a specific\n\n         occurrence happened.  The specific occurrence must be\n\n         defined in the description of any object defined using this\n\n         type."
  },
  "TimeInterval": {
    "name": "TimeInterval",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type"
    },
    "status": "current",
    "description": "A period of time, measured in units of 0.01 seconds."
  },
  "DateAndTime": {
    "name": "DateAndTime",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "displayhint": "2d-1d-1d,1d:1d:1d.1d,1a1d:1d",
    "status": "current",
    "description": "A date-time specification.\n\n\n\n         field  octets  contents                  range\n\n         -----  ------  --------                  -----\n\n           1      1-2   year                      0..65536\n\n           2       3    month                     1..12\n\n           3       4    day                       1..31\n\n           4       5    hour                      0..23\n\n           5       6    minutes                   0..59\n\n           6       7    seconds                   0..60\n\n                        (use 60 for leap-second)\n\n           7       8    deci-seconds              0..9\n\n           8       9    direction from UTC        '+' / '-'\n\n           9      10    hours from UTC            0..11\n\n          10      11    minutes from UTC          0..59\n\n\n\n         For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be\n\n         displayed as:\n\n\n\n                          1992-5-26,13:30:15.0,-4:0\n\n\n\n         Note that if only local time is known, then timezone\n\n         information (fields 8-10) is not present."
  },
  "StorageType": {
    "name": "StorageType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "volatile": 2,
          "nonVolatile": 3,
          "permanent": 4,
          "readOnly": 5
        }
      }
    },
    "status": "current",
    "description": "Describes the memory realization of a conceptual row.  A\n\n         row which is volatile(2) is lost upon reboot.  A row which\n\n         is either nonVolatile(3), permanent(4) or readOnly(5), is\n\n         backed up by stable storage.  A row which is permanent(4)\n\n         can be changed but not deleted.  A row which is readOnly(5)\n\n         cannot be changed nor deleted.\n\n\n\n         If the value of an object with this syntax is either\n\n         permanent(4) or readOnly(5), it cannot be modified.\n\n         Conversely, if the value is either other(1), volatile(2) or\n\n         nonVolatile(3), it cannot be modified to be permanent(4) or\n\n         readOnly(5).\n\n\n\n         Every usage of this textual convention is required to\n\n         specify the columnar objects which a permanent(4) row must\n\n         at a minimum allow to be writable."
  },
  "TDomain": {
    "name": "TDomain",
    "class": "textualconvention",
    "type": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "status": "current",
    "description": "Denotes a kind of transport service.\n\n\n\n         Some possible values, such as snmpUDPDomain, are defined in\n\n         'Transport Mappings for Version 2 of the Simple Network\n\n         Management Protocol (SNMPv2)'."
  },
  "TAddress": {
    "name": "TAddress",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "status": "current",
    "description": "Denotes a transport service address.\n\n\n\n         For snmpUDPDomain, a TAddress is 6 octets long, the initial 4\n\n         octets containing the IP-address in network-byte order and the\n\n         last 2 containing the UDP port in network-byte order.  Consult\n\n         'Transport Mappings for Version 2 of the Simple Network\n\n         Management Protocol (SNMPv2)' for further information on\n\n         snmpUDPDomain."
  },
  "meta": {
    "comments": [
      "ASN.1 source file:///home/worker/workspaces/snmp-cockpit/mib/orig/SNMPv2-TC.txt",
      "Produced by pysmi-0.3.2 at Fri Jul 26 22:09:51 2019",
      "On host workerhost.local platform Linux version 5.1.15-300.fc30.x86_64 by user worker",
      "Using Python version 3.7.3 (default, May 11 2019, 00:38:04) "
    ],
    "module": "SNMPv2-TC"
  }
}